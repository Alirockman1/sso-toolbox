function plotHandle = plot_convex_hull_2d(figureHandle,hullSample,convexHullIndex,varargin)
%PLOT_CONVEX_HULL_2D Visualize a 2-dimensional convex hull
%   PLOT_CONVEX_HULL_2D plots in a figure the edges of a convex hull.
%   
%   PLOT_CONVEX_HULL_2D(FIGUREHANDLE,HULLSAMPLE,CONVEXHULLINDEX) plots in 
%   FIGUREHANDLE the convex hull defined by the samples used in its computation
%   HULLSAMPLE and the resulting connections CONVEXHULLINDEX. The hull is 
%   represented by a black line going along its edges.
%
%   PLOT_CONVEX_HULL_2D(...,NAME,VALUE,...) also allows one to choose the 
%   options of the plot done for the convex hull; these options refer to the 
%   'plot' function. The one property with a default value is 'Color', which is 
%   set to black ([0 0 0]); this can be changed, as well as any other 'plot' 
%   option.
%
%   PLOTHANDLE = PLOT_CONVEX_HULL_2D(...) returns the handle of the resulting
%   plot, which can be used later for 'legend', for example.
%
%   Input:
%       - FIGUREHANDLE : Figure
%       - HULLSAMPLE : (nSample,2) double
%       - CONVEXHULLINDEX : (nHull,2) integer
%       - Name-value pair arguments : passed directly to 'plot'.
%   Output:
%       - PLOTHANDLE : Line
%
%   See also plot, convex_hull_face, legend, plot_convex_hull_3d.
%
%   Copyright 2024 Eduardo Rodrigues Della Noce
%   SPDX-License-Identifier: Apache-2.0

%   Licensed under the Apache License, Version 2.0 (the "License");
%   you may not use this file except in compliance with the License.
%   You may obtain a copy of the License at
% 
%       http://www.apache.org/licenses/LICENSE-2.0
% 
%   Unless required by applicable law or agreed to in writing, software
%   distributed under the License is distributed on an "AS IS" BASIS,
%   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%   See the License for the specific language governing permissions and
%   limitations under the License.
    
    inputPlotOptions = parser_variable_input_to_structure(varargin{:});

    defaultPlotOptions = {'Color',[0 0 0]};
    [~,plotOptions] = merge_name_value_pair_argument(defaultPlotOptions,inputPlotOptions);

    convHullIndexPlot = convexHullIndex;
    if(size(convexHullIndex,2)==2) % generated by convhulln or convex_hull_face
        convHullIndexPlot = row_major_matrix_to_column_vector(convHullIndexPlot);
        repeatPlotEntry = [false;convHullIndexPlot(2:end)==convHullIndexPlot(1:end-1)];
        convHullIndexPlot(repeatPlotEntry) = [];
    end

    figure(figureHandle);
    hold on;
	plotHandle = plot(hullSample(convHullIndexPlot,1),hullSample(convHullIndexPlot,2),plotOptions{:});

    if(nargout<1)
        clear plotHandle
    end
end