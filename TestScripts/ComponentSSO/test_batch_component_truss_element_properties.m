%% Cleanup
fclose all;
close all;
clear all;
clc;
more off;
diary off;


%% debugging
rng(4);


%% Documentation / Archive
rngState = rng;
saveFolder = save_diary_files(mfilename);
goldenRatio = (1+sqrt(5))/2;
figureSize = [goldenRatio 1]*8.5;


%% Considered material properties
% Material properties arrays
youngsModulusMaterial = [200e9, 70e9, 116e9, 45e9]; % [Pa] Steel, Aluminum, Titanium, Magnesium
densityMaterial = [7850, 2700, 4500, 1740];         % [kg/m^3] Steel, Aluminum, Titanium, Magnesium
yieldStrengthMaterial = [250e6, 110e6, 1200e6, 200e6]; % [Pa] Steel, Aluminum, Titanium, Magnesium


[youngsModulusMaterial,materialOrder] = sort(youngsModulusMaterial);
densityMaterial = densityMaterial(materialOrder);
yieldStrengthMaterial = yieldStrengthMaterial(materialOrder);


%%
trussAnalysisChoice = '4-Bar-2D';
fixRadius = true;


%% batch options
fixedOptionsAll = {...
    'RequirementSpacesType','Omega1',...
    'FixIterNumberExploration',true,...
    'FixIterNumberConsolidation',true,...
    'MaxIterExploration',200,...
    'MaxIterConsolidation',200,...
    'UseAdaptiveGrowthRate',true,...
    'GrowthRate',0.07,...
    'MaximumGrowthAdaptationFactor',1.5,...
    'ApplyLeanness','never',...
    'TrimmingOperationOptions',{'PassesCriterion','single'},...
    'TrimmingOrderOptions',{'OrderPreference','score'},...
    'LoggingLevel','all'};

fixedOptionsBoxSpecific = {};

fixedOptionsComponentSpecific = {...
    'CandidateSpaceOptions',{'NormalizeGrowthDirection',true,'CheckRedundantTrimmingGrowth',false,'CheckRedundantTrimmingUpdate',true,'CheckDuplicatePointsGrowth',false,'CheckDuplicatePointsUpdate',true,'MeasureEstimationFactor',2},...
    'TrimmingMethodOptions',{'NormalizeVariables',true},...
    'UsePaddingSamplesInTrimming',true,...
    'MaximumNumberPaddingSamples',10000,...
    'UsePreviousEvaluatedSamplesConsolidation',false,...
    'ShapeSamplesUsefulConsolidation',true};


%% system definition
systemFunction = @truss_generic_element_properties_dependent_density;
switch trussAnalysisChoice
    case '2-Bar-2D'
        systemParameter.NodePosition = [...
            0   0;  ...
            0   1; ...
            1 0.5];
        systemParameter.FixedDegreesOfFreedom = [...
             true  true; ...
             true  true;
            false false];
        systemParameter.NodeForce = [...
            0 0; ...
            0 0; ...
            0 -1000];
        systemParameter.NodeElement = [...
            1 3; ...
            2 3];
    case '4-Bar-2D'
        systemParameter.NodePosition = [...
            0 0;  ...
            1 0; ...
            1 1; ...
            0 1];
        systemParameter.FixedDegreesOfFreedom = [...
            true true; ...
            false false; ...
            false false; ...
            true true];
        systemParameter.NodeForce = [...
            0 0; ...
            0 0; ...
            0 -1000; ...
            0 0];
        systemParameter.NodeElement = [...
            1 2; ...
            2 3; ...
            3 4; ...
            2 4];
    case '6-Bar-2D'
        systemParameter.NodePosition = [...
            0 0;  ...
            1 0; ...
            2 0.5; ...
            1 1; ...
            0 1];
        systemParameter.FixedDegreesOfFreedom = [...
            true true; ...
            false false; ...
            false false; ...
            false false; ...
            true true];
        systemParameter.NodeForce = [...
            0 0; ...
            0 0; ...
            0 -1000; ...
            0 0; ...
            0 0];
        systemParameter.NodeElement = [...
            1 2; ...
            2 3; ...
            3 4; ...
            4 5; ...
            2 5; ...
            2 4];
end


%% base parameters
nElement = size(systemParameter.NodeElement,1);

minimumRadius = 0.5;
minimumThickness = 0.001;
minimumYoungsModulus = min(youngsModulusMaterial);

maximumRadius = 1.5;
maximumThickness = 0.5;
maximumYoungsModulus = max(youngsModulusMaterial);

designSpaceLowerBound = repmat([minimumRadius,minimumThickness,minimumYoungsModulus],1,nElement);
designSpaceUpperBound = repmat([maximumRadius,maximumThickness,maximumYoungsModulus],1,nElement);
initialDesign = repmat([minimumRadius,minimumThickness,minimumYoungsModulus]+[maximumRadius,maximumThickness,maximumYoungsModulus],1,nElement)/2;

componentIndex = arrayfun(@(i) (3*(i-1)+1):3*i, 1:nElement, 'UniformOutput', false);

systemParameter.EstimateMassGivenYoungsModulus = @(E) interp1(youngsModulusMaterial,densityMaterial,E);
systemParameter.EstimateYieldStrengthGivenYoungsModulus = @(E) interp1(youngsModulusMaterial,yieldStrengthMaterial,E);


%% Analyse initial truss
% deformed initial truss
elementRadius = initialDesign(1:3:end)';
elementThickness = initialDesign(2:3:end)';
elementYoungsModulus = initialDesign(3:3:end)';
elementCrossSectionArea = pi*elementRadius.^2 - pi*(elementRadius-elementThickness).^2;

nodeDisplacementInitial = ...
    truss_analysis(...
	    systemParameter.NodePosition,...
	    systemParameter.FixedDegreesOfFreedom,...
	    systemParameter.NodeForce,...
	    systemParameter.NodeElement,...
	    elementCrossSectionArea,...
	    elementYoungsModulus);


%% establish upper performance limits
nElement = size(systemParameter.NodeElement,1);
performanceLowerLimit = [  0   0 -inf(1,2*nElement)];
performanceUpperLimit = [nan nan ones(1,nElement) ones(1,nElement)];

% update uppwer limit based on either optimal value or initial value
bottomUpMapping = BottomUpMappingFunction(systemFunction,'SystemParameter',systemParameter);
if(fixRadius)
    [bottomUpMapping,designSpaceLowerBound,designSpaceUpperBound,initialDesign,componentIndex] = ...
        BottomUpMappingFixedVariables(bottomUpMapping,repmat([true false false],1,nElement),initialDesign(1:3:end),designSpaceLowerBound,designSpaceUpperBound,initialDesign,componentIndex);
end
performanceMeasureInitial = bottomUpMapping.response(initialDesign);

performanceLowerLimit(1) = performanceMeasureInitial(1)*0.9;
performanceUpperLimit(1) = performanceMeasureInitial(1)*1.1;
designEvaluator = DesignEvaluatorBottomUpMapping(...
    bottomUpMapping,...
    performanceLowerLimit,...
    performanceUpperLimit);


%% run batch analysis - box
batchOptionsBox = batch_analysis_read_table('BatchTestTrussBox.xlsx');
[~,fixedOptionsBox] = merge_name_value_pair_argument(fixedOptionsAll,fixedOptionsBoxSpecific);
[solutionSpaceBox,optimizationDataBox,algoDataBox,batchOptionsBox] = batch_sso_stochastic_analysis(...
    batchOptionsBox,...
    designEvaluator,...
    initialDesign,...
    designSpaceLowerBound,...
    designSpaceUpperBound,...
    'FixedOptions',fixedOptionsBox);


%% plot data - box
plot_batch_sso_stochastic_analysis_box_metrics(batchOptionsBox,algoDataBox,'SaveFolder',[saveFolder,'Box/']);


%% run batch analysis - component
batchOptionsComponent = batch_analysis_read_table('BatchTestTruss.xlsx');
[~,fixedOptionsComponent] = merge_name_value_pair_argument(fixedOptionsAll,fixedOptionsComponentSpecific);
[solutionSpaceComponent,optimizationDataComponent,algoDataComponent,batchOptionsComponent] = batch_sso_stochastic_analysis(...
    batchOptionsComponent,...
    designEvaluator,...
    initialDesign,...
    designSpaceLowerBound,...
    designSpaceUpperBound,...
    componentIndex,...
    'FixedOptions',fixedOptionsComponent);


%% plot data - component
plot_batch_sso_stochastic_analysis_component_metrics(batchOptionsComponent,algoDataComponent,'SaveFolder',[saveFolder,'Component/']);


%% Save and Stop Transcripting
save([saveFolder,'Data.mat'],'-v7.3');
diary off;

