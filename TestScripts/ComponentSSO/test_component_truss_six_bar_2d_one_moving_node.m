%test_component_hollow_sphere Component solution spaces for a sphere problem 
%   test_component_hollow_sphere computes a component solution spaces with 
%   for a sphere problem.
%
%   Copyright 2024 Eduardo Rodrigues Della Noce
%   SPDX-License-Identifier: Apache-2.0

%   Licensed under the Apache License, Version 2.0 (the "License");
%   you may not use this file except in compliance with the License.
%   You may obtain a copy of the License at
%   
%       http://www.apache.org/licenses/LICENSE-2.0
%   
%   Unless required by applicable law or agreed to in writing, software
%   distributed under the License is distributed on an "AS IS" BASIS,
%   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%   See the License for the specific language governing permissions and
%   limitations under the License.

%% Cleanup
fclose all;
close all;
clear all;
clc;
more off;
diary off;


%% debugging
rng(4);


%% Documentation / Archive
rngState = rng;
saveFolder = save_diary_files(mfilename);
goldenRatio = (1+sqrt(5))/2;
figureSize = [goldenRatio 1]*8.5;


%% function call
%
systemFunction = @truss_six_bar_2d_one_moving_node;
systemParameter = [10,210e3]; % [mm^2],[MPa]
%                          x   y
designSpaceLowerBound = [0.9 0.5];
designSpaceUpperBound = [2.0 1.5];
Components = {[1,2]'};
%
performanceLowerLimit = 0;
performanceUpperLimit = [nan repmat(250,1,6)];
%
initialDesign = [1,1];

figureIncludeLegendHeadline = false;


%% find optimum
bottomUpMapping = BottomUpMappingFunction(systemFunction,systemParameter);

[nodePositionOptimal,displacementOptimal] = design_optimize_quantities_of_interest(...
    bottomUpMapping,...
    initialDesign,...
    designSpaceLowerBound,...
    designSpaceUpperBound,...
    @(performanceMeasure)[performanceMeasure(1)],...
    'InequalityConstraintFunction',@(performanceMeasure)[performanceMeasure(2:end)-performanceUpperLimit(2:end)],...
    'OptimizationMethodOptions',{'Display','iter-detailed'});


%% Box Opt - Function
% update uppwer limit based on optimal value
performanceUpperLimit(1) = displacementOptimal*1.1;

designEvaluator = DesignEvaluatorBottomUpMapping(...
        bottomUpMapping,...
        performanceLowerLimit,...
        performanceUpperLimit);


timeElapsedBox = tic;
optionsBox = sso_stochastic_options('box',...
    'NumberSamplesPerIterationExploration',300,...
    'NumberSamplesPerIterationConsolidation',300,...
    'FixIterNumberExploration',true,...
    'FixIterNumberConsolidation',true,...
    'MaxIterExploration',30,...
    'MaxIterConsolidation',30,...
    'UseAdaptiveGrowthRate',false,...
    'GrowthRate',0.1,...
    'ApplyLeanness','never',...
    'TrimmingOperationOptions',{'PassesCriterion','full'},...
    'TrimmingOrderOptions',{'OrderPreference','score'});

rng(rngState);
[solutionSpaceBox,problemDataBox,iterDataBox] = sso_box_stochastic(designEvaluator,...
    initialDesign,designSpaceLowerBound,designSpaceUpperBound,optionsBox);
toc(timeElapsedBox)


%% Component Opt - 
timeElapsedComponent = tic;
optionsComponent = sso_stochastic_options('component',...
    'NumberSamplesPerIterationExploration',300,...
    'NumberSamplesPerIterationConsolidation',300,...
    'FixIterNumberExploration',true,...
    'FixIterNumberConsolidation',true,...
    'MaxIterExploration',30,...
    'MaxIterConsolidation',30,...
    'CandidateSpaceConstructorExploration',@CandidateSpaceDelaunay,...
    'CandidateSpaceConstructorConsolidation',@CandidateSpaceDelaunay,...
    'TrimmingMethodFunction',@component_trimming_method_corner_box_removal,...
    ... 'TrimmingMethodOptions',{'ReferenceDesigns','boundary-center'},...
    'UseAdaptiveGrowthRate',false,...
    'GrowthRate',0.1,...
    'ApplyLeanness','never',...
    'UsePaddingSamplesInTrimming',true,...
    'UsePreviousEvaluatedSamplesConsolidation',false,...
    'UsePreviousPaddingSamplesConsolidation',false,...
    'TrimmingOperationOptions',{'PassesCriterion','reduced'},...
    'TrimmingOrderOptions',{'OrderPreference','score'});

% rng(rngState);
[componentSolutionSpace,problemDataComponent,iterDataComponent] = sso_component_stochastic(designEvaluator,...
    initialDesign,designSpaceLowerBound,designSpaceUpperBound,Components,optionsComponent);
toc(timeElapsedComponent)


%% Plot Visualization
nodePositionInitial = [...
    0 0;  ...
    1 0; ...
    2 0.5; ...
    initialDesign([1,2]); ...
    0 1];
nodePositionOptimized = [...
    0 0; ...
    1 0; ...
    2 0.5; ...
    nodePositionOptimal([1,2]); ...
    0 1];
fixedDegreesOfFreedom = [...
    true true; ...
    false false; ...
    false false; ...
    false false; ...
    true true];
nodeForce = [...
    0 0; ...
    0 0; ...
    0 -1000; ...
    0 0; ...
    0 0];
nodeElement = [...
    1 2; ...
    2 3; ...
    3 4; ...
    4 5; ...
    2 5; ...
    2 4];
elementCrossSectionArea = systemParameter(1); % [mm^2]
elementYoungsModulus = systemParameter(2); % [MPa]

wallX = [0 0];
wallY = [-0.1 1.1];

% initial truss
figure;
hold all;
handleInitial = plot_truss_deformation(gcf,nodePositionInitial,nodeElement,'ColorUndeformed',[0.8 0.8 0.8],'MaximumLinewidth',3.0);
handleWall = plot(wallX,wallY,'Linewidth',8.0,'Color',[0.7 0.7 0.7]);
handleForce = quiver(2,0.5,0,-0.5,'Color','r','LineWidth',4.0);
grid minor;
if(figureIncludeLegendHeadline)
    legend([handleInitial,handleWall,handleForce],...
        {'Initial Truss','Wall','Applied Force'},...
        'location','west');
end
save_print_figure(gcf,[saveFolder,'InitialTruss']);

% initial truss + component solution spaces
figure;
hold all;
handleInitial = plot_truss_deformation(gcf,nodePositionInitial,nodeElement,'ColorUndeformed',[0.8 0.8 0.8],'MaximumLinewidth',3.0);
handleWall = plot(wallX,wallY,'Linewidth',8.0,'Color',[0.7 0.7 0.7]);
handleForce = quiver(2,0.5,0,-0.5,'Color','r','LineWidth',4.0);
handleToleranceNodeComponent = componentSolutionSpace(1).plot_candidate_space(gcf,'EdgeColor','g','FaceColor','none','FaceAlpha',0.5,'Linewidth',2.0);
grid minor;
if(figureIncludeLegendHeadline)
    legend([handleInitial,handleWall,handleForce,handleToleranceNodeComponent],...
        {'Initial Truss','Wall','Applied Force','Tolerance Region for the Node (Component)'},...
        'location','west');
end
save_print_figure(gcf,[saveFolder,'InitialTrussComponent']);

% initial truss + optimized truss + box solution space + component solution spaces
figure;
hold all;
handleInitial = plot_truss_deformation(gcf,nodePositionInitial,nodeElement,'ColorUndeformed',[0.8 0.8 0.8],'MaximumLinewidth',3.0);
handleOptimal = plot_truss_deformation(gcf,nodePositionOptimized,nodeElement,'ColorUndeformed','b','MaximumLinewidth',3.0);
handleWall = plot(wallX,wallY,'Linewidth',8.0,'Color',[0.7 0.7 0.7]);
handleForce = quiver(2,0.5,0,-0.5,'Color','r','LineWidth',4.0);
handleToleranceNodeBox = plot_design_box_2d(gcf,solutionSpaceBox(:,[1,2]),'EdgeColor','c','Linewidth',2.0);
handleToleranceNodeComponent = componentSolutionSpace(1).plot_candidate_space(gcf,'EdgeColor','g','FaceColor','none','FaceAlpha',0.5,'Linewidth',2.0);
grid minor;
if(figureIncludeLegendHeadline)
    legend([...
            handleInitial,...
            handleOptimal,...
            handleWall,...
            handleForce,...
            handleToleranceNodeBox,...
            handleToleranceNodeComponent...
            ],...
        {...
            'Initial Truss',...
            'Optimized Truss',...
            'Wall',...
            'Applied Force',...
            'Tolerance Region for the Node (Box)',...
            'Tolerance Region for the Node (Component)'...
            },...
        'location','west');
    measureComponent1 = componentSolutionSpace(1).Measure;
    measureComponent2 = componentSolutionSpace(2).Measure;
    measureBox1 = prod(solutionSpaceBox(2,[1,2])-solutionSpaceBox(1,[1,2]));
    measureBox2 = prod(solutionSpaceBox(2,[3,4])-solutionSpaceBox(1,[3,4]));
    title(sprintf('Volume Increases - Node 1: %.3gx ; Node 2: %.3gx',...
        measureComponent1/measureBox1,...
        measureComponent2/measureBox2));
end
save_print_figure(gcf,[saveFolder,'InitialOptimizedTrussComponent']);

% initial truss + box solution space + component solution spaces
figure;
hold all;
handleInitial = plot_truss_deformation(gcf,nodePositionInitial,nodeElement,'ColorUndeformed',[0.8 0.8 0.8],'MaximumLinewidth',3.0);
handleWall = plot(wallX,wallY,'Linewidth',8.0,'Color',[0.7 0.7 0.7]);
handleForce = quiver(2,0.5,0,-0.5,'Color','r','LineWidth',4.0);
handleToleranceNodeBox = plot_design_box_2d(gcf,solutionSpaceBox(:,[1,2]),'EdgeColor','c','Linewidth',2.0);
handleToleranceNodeComponent = componentSolutionSpace(1).plot_candidate_space(gcf,'EdgeColor','g','FaceColor','none','FaceAlpha',0.5,'Linewidth',2.0);
grid minor;
if(figureIncludeLegendHeadline)
    legend([handleInitial,handleWall,handleForce,handleToleranceNodeBox,handleToleranceNodeComponent],...
        {'Initial Truss','Wall','Applied Force','Tolerance Region for the Node (Box)','Tolerance Region for the Node (Component)'},...
        'location','west');
end
save_print_figure(gcf,[saveFolder,'InitialTrussBoxComponent']);

% initial truss + sample trusses + component solution space
nRandomTruss = 5;
randomTrussMovingNode = candidate_space_sampling_individual_feasible(componentSolutionSpace,Components,nRandomTruss);

figure;
hold all;
handleInitial = plot_truss_deformation(gcf,nodePositionInitial,nodeElement,'ColorUndeformed',[0.8 0.8 0.8],'MaximumLinewidth',3.0);
handleWall = plot(wallX,wallY,'Linewidth',8.0,'Color',[0.7 0.7 0.7]);
handleForce = quiver(2,0.5,0,-0.5,'Color','r','LineWidth',4.0);
handleToleranceNodeComponent = componentSolutionSpace(1).plot_candidate_space(gcf,'EdgeColor','g','FaceColor','none','FaceAlpha',0.5,'Linewidth',2.0);
for i=1:nRandomTruss
    randomNodePosition = nodePositionInitial;
    randomNodePosition(4,:) = randomTrussMovingNode(i,[1,2]);
    handleRandom(i) = plot_truss_deformation(gcf,randomNodePosition,nodeElement,'ColorUndeformed',rand(1,3),'MaximumLinewidth',3.0);
end
grid minor;
if(figureIncludeLegendHeadline)
    legend([handleInitial,handleWall,handleForce,handleToleranceNodeComponent],...
        {'Initial Truss','Wall','Applied Force','Tolerance Region for the Node (Component)'},...
        'location','west');
end
save_print_figure(gcf,[saveFolder,'InitialRandomTrussComponent']);


%% plot candidate spaces samples
% candidate space 
designSample = componentSolutionSpace(1).DesignSampleDefinition;
labelSample = componentSolutionSpace(1).IsInsideDefinition;
figure;
componentSolutionSpace(1).plot_candidate_space(gcf,'EdgeColor','none','FaceColor','g','FaceAlpha',0.5,'Linewidth',2.0);
hold all;
plot(designSample(labelSample,1),designSample(labelSample,2),'g.');
plot(designSample(~labelSample,1),designSample(~labelSample,2),'r.');
grid minor;
save_print_figure(gcf,[saveFolder,'ComponentSpace1TrimmingPlot']);


%% 
algoDataBox = postprocess_sso_box_stochastic(problemDataBox,iterDataBox);
plot_sso_box_stochastic_metrics(algoDataBox,'SaveFolder',saveFolder,'CloseFigureAfterSaving',true);

algoDataComponent = postprocess_sso_component_stochastic(problemDataComponent,iterDataComponent);
plot_sso_component_stochastic_metrics(algoDataComponent,'SaveFolder',saveFolder,'CloseFigureAfterSaving',true);



%% Save and Stop Transcripting
save([saveFolder,'Data.mat']);
diary off;

