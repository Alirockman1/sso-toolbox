%% cleanup
close all;
fclose all;
clear all;
more off;
diary off;
clc;


%% debugging
rng(4);


%% Documentation / Archive
rngState = rng;
saveFolder = save_diary_files(mfilename);
goldenRatio = (1+sqrt(5))/2;
figureSize = [goldenRatio 1]*8.5;


%% setup problem parameters
nDivision = 15; % number of design variables (discretization)
initialPosition = 1;
initialVelocity = 0;
mass = 1;
timeSpan = 10;

dampingCoefficient = 0.01;
maxStiffnessForce = 10;

maximumDisplacement = 1;



%% setup design space
baseVariableDesignSpace = [-initialPosition;initialPosition];
functionalDesignSpace = [-maxStiffnessForce;maxStiffnessForce];
initialDesign = maxStiffnessForce;


%% setup system function
systemFunction = @one_mass_oscillator_continuous_stiffness_only;
systemParameter = [mass,initialPosition,initialVelocity,timeSpan,dampingCoefficient];

continuousMapping = BottomUpMappingFunction(systemFunction,systemParameter);
[bottomUpMapping,functionalDiscreteBound,discreteInitialDesign,discreteComponentIndex] = BottomUpMappingContinuousVariables(continuousMapping, baseVariableDesignSpace, functionalDesignSpace, initialDesign, {1}, 'NumberOfStencils',nDivision);

% change initial design to be a linear function
discreteInitialDesign = linspace(-maxStiffnessForce,maxStiffnessForce,length(discreteInitialDesign));

% Split component indices into groups of 3
nGroups = ceil(nDivision/3);
componentIndexGroups = cell(1, nGroups);
for i = 1:nGroups-1
    componentIndexGroups{i} = discreteComponentIndex{1}((i-1)*3+1:i*3);
end
% Handle last group which may have less than 3 elements
componentIndexGroups{nGroups} = discreteComponentIndex{1}((nGroups-1)*3+1:end);
discreteComponentIndex = componentIndexGroups;


%% setup performance limits
performanceLowerLimit = -maximumDisplacement;
performanceUpperLimit = maximumDisplacement;
designEvaluator = DesignEvaluatorBottomUpMapping(bottomUpMapping,performanceLowerLimit,performanceUpperLimit);


%% Perform Solution Space Computation
optionsBox = sso_stochastic_options('box',...
    'UseAdaptiveGrowthRate',true,...
    'NumberSamplesPerIteration',100,...
    'GrowthRate',0.005,...
    'FixIterNumberExploration',true,...
    'FixIterNumberConsolidation',true,...
    'MaxIterExploration',200,...
    'MaxIterConsolidation',200,...
    'TrimmingOperationOptions',{'PassesCriterion','single'},...
    'TrimmingOrderOptions',{'OrderPreference','score'},...
    'LoggingLevel','all');

rng(rngState);
[designBoxOptimal,optimizationDataBox] = sso_box_stochastic(designEvaluator,...
    discreteInitialDesign,functionalDiscreteBound(1,:),functionalDiscreteBound(2,:),optionsBox);


%% plot
figure; 
hold on;
for i=1:nDivision
    handleSolutionSpacePlot = plot([bottomUpMapping.BaseVariablesStencils{1}(i) bottomUpMapping.BaseVariablesStencils{1}(i)],designBoxOptimal(:,i),'g-','linewidth',12);
end
plot([-initialPosition initialPosition],[0 0],'k--');
grid minor;
xlim([-initialPosition initialPosition])
xlabel('Displacement [m]');
ylabel('Force Applied by Spring [N]');
legend(handleSolutionSpacePlot,'Solution Spaces','Location','northwest');


%% same problem, component solution spaces - planar trimming
options = sso_stochastic_options('component',...
    'UseAdaptiveGrowthRate',true,...
    'TargetAcceptedRatioExploration',0.7,...
    'GrowthRate',0.005,...
    'FixIterNumberExploration',true,...
    'FixIterNumberConsolidation',true,...
    'MaxIterExploration',200,...
    'MaxIterConsolidation',200,...
    'NumberSamplesPerIteration',100,...
    'CandidateSpaceConstructor',@CandidateSpaceConvexHull,...
    'TrimmingMethodFunction',@component_trimming_method_planar_trimming,...
    'UsePaddingSamplesInTrimming',true,...
    'UsePreviousEvaluatedSamplesConsolidation',false,...
    'ApplyLeanness','never',...
    'LoggingLevel','all',...
    'TrimmingOperationOptions',{'PassesCriterion','single'},...
    'TrimmingOrderOptions',{'OrderPreference','score'});

rng(rngState);
[planarTrimmingSolutionSpace,optimizationDataPlanarTrimming] = sso_component_stochastic(designEvaluator,...
    discreteInitialDesign,functionalDiscreteBound(1,:),functionalDiscreteBound(2,:),discreteComponentIndex,options);


%% same problem, component solution spaces - corner box removal
options = sso_stochastic_options('component',...
    'UseAdaptiveGrowthRate',true,...
    'TargetAcceptedRatioExploration',0.7,...
    'GrowthRate',0.005,...
    'FixIterNumberExploration',true,...
    'FixIterNumberConsolidation',true,...
    'MaxIterExploration',200,...
    'MaxIterConsolidation',200,...
    'NumberSamplesPerIteration',100,...
    'CandidateSpaceConstructor',@CandidateSpaceCornerBoxRemoval,...
    'TrimmingMethodFunction',@component_trimming_method_corner_box_removal,...
    ... 'TrimmingMethodOptions',{'CornersToTest','away'},...
    'UsePaddingSamplesInTrimming',true,...
    'UsePreviousEvaluatedSamplesConsolidation',false,...
    'ApplyLeanness','never',...
    'LoggingLevel','all',...
    'TrimmingOperationOptions',{'PassesCriterion','single'},...
    'TrimmingOrderOptions',{'OrderPreference','score'},...
    'MaximumGrowthAdaptationFactor',1.0);

rng(rngState);
[cornerBoxRemovalSolutionSpace,optimizationDataCornerBoxRemoval] = sso_component_stochastic(designEvaluator,...
    discreteInitialDesign,functionalDiscreteBound(1,:),functionalDiscreteBound(2,:),discreteComponentIndex,options);


%% visualization
for i=1:size(discreteComponentIndex,2)
    currentBox = designBoxOptimal(:,discreteComponentIndex{i});
    currentComponentSpace = planarTrimmingSolutionSpace(i);
    
    figure;
    hold on;
    plot_design_box_3d(gcf,currentBox,'FaceAlpha',0.5,'FaceColor',[0.8 0.8 0.8]);
    planarTrimmingSolutionSpace(i).plot_candidate_space(gcf,...
        'FaceColor','green','EdgeColor','green','FaceAlpha',0.1);
    cornerBoxRemovalSolutionSpace(i).plot_candidate_space(gcf,...
        'FaceColor','blue','EdgeColor','none','FaceAlpha',0.1);
    grid minor;
    

    %
    muBox(i) = prod(currentBox(2,:)-currentBox(1,:));
    
    %
    muComponent(i) = planarTrimmingSolutionSpace(i).Measure;
    muCornerBoxRemoval(i) = cornerBoxRemovalSolutionSpace(i).Measure;

    %
    title(sprintf('Box Volume = %g(N/m)^3 ; Planar Trimming Volume = %g(N/m)^3 ; Corner Box Removal Volume = %g(N/m)^3 ;',...
            muBox(i),muComponent(i),muCornerBoxRemoval(i)));
end

fprintf('\nTotal Box Volume: %g\nTotal Component Volume (Planar): %g\nTotal Component Volume (Corner): %g\nTotal Increase (Planar): %gx\nTotal Increase (Corner): %gx\n',...
    prod(muBox),prod(muComponent),prod(muCornerBoxRemoval),...
    prod(muComponent)/prod(muBox),prod(muCornerBoxRemoval)/prod(muBox));


%% performance metrics
resultsFolder = [saveFolder,sprintf('ResultsBox/')];
mkdir(resultsFolder);
algoDataBox = postprocess_sso_box_stochastic(optimizationDataBox);
plot_sso_box_stochastic_metrics(algoDataBox,...
    'SaveFolder',resultsFolder,...
    'CloseFigureAfterSaving',true,...
    'SaveFigureOptions',{'Size',figureSize,'PrintFormat',{'png','pdf'}});

resultsFolder = [saveFolder,sprintf('ResultsPlanarTrimming/')];
mkdir(resultsFolder);
algoDataPlanarTrimming = postprocess_sso_component_stochastic(optimizationDataPlanarTrimming);
plot_sso_component_stochastic_metrics(algoDataPlanarTrimming,...
    'SaveFolder',resultsFolder,...
    'CloseFigureAfterSaving',true,...
    'SaveFigureOptions',{'Size',figureSize,'PrintFormat',{'png','pdf'}});

resultsFolder = [saveFolder,sprintf('ResultsCornerBoxRemoval/')];
mkdir(resultsFolder);
algoDataCornerBoxRemoval = postprocess_sso_component_stochastic(optimizationDataCornerBoxRemoval);
plot_sso_component_stochastic_metrics(algoDataCornerBoxRemoval,...
    'SaveFolder',resultsFolder,...
    'CloseFigureAfterSaving',true,...
    'SaveFigureOptions',{'Size',figureSize,'PrintFormat',{'png','pdf'}});

resultsFolder = [saveFolder,sprintf('ResultsComparison/')];
mkdir(resultsFolder);
plot_sso_comparison_box_component_stochastic_metrics(...
    {algoDataBox},...
    {algoDataPlanarTrimming,algoDataCornerBoxRemoval},...
    'ComponentLabel',{'Planar Trimming','Corner Box Removal'},...
    'BoxColor','k',...
    'ComponentColor',color_palette_tol({'green','blue'}),...
    'SaveFolder',resultsFolder,...
    'CloseFigureAfterSaving',false,...
    'SaveFigureOptions',{'Size',figureSize,'PrintFormat',{'png','pdf'}});



%% Save and Stop Transcripting
save([saveFolder,'Data.mat']);
diary off;

